/*
    Copyright ï¿½2006 by Redstone Handelsbolag
    All Rights Reserved.

    The copyright to the source code herein is the property of
    Redstone Handelsbolag. The source code may be used and/or copied only
    with written permission from Redstone or in accordance with
    the terms and conditions stipulated in the agreement/contract
    under which the source code has been supplied.
*/

package redstone.xmlrpc;

import java.util.MissingResourceException;
import java.util.concurrent.ConcurrentHashMap;

/**
 *  Contains various messages generated by the library. The original messages are
 *  stored in XmlRpcMessages.properties, which may be overridden by creating
 *  additional locale specific bundles. This is achieved by placing a copy of
 *  XmlRpcMessages.properties with the locale specific suffix (like
 *  XmlRpcMessages_de.properties for German). The bundle will automatically be selected
 *  depending on the default locale of the JVM.
 *
 *  @author Greger Olsson
 */

public class XmlRpcMessages
{
    /**
     *  Returns a message from the resource bundle corresponding to the given key.
     * 
     *  @param key The message key.
     *  @return The message corresponding to the message key.
     *  @throws MissingResourceException If the message is not found.
     */

    public static String getString( String key )
    {
        try{
            String str =  RESOURCE_BUNDLE.get( key );
            if(str == null || str.length() == 0){
            	throw new Exception();
            }
            return str;
        }catch (Exception e){
            return '!' + key + '!';
        }
    }
    
    private static final ConcurrentHashMap<String, String> RESOURCE_BUNDLE = new ConcurrentHashMap<String, String>();
    static{
    	RESOURCE_BUNDLE.put("XmlRpcClient.NetworkError","A network error occurred.");
    	RESOURCE_BUNDLE.put("XmlRpcClient.NetworkErrorTimeout","A network error occurred (Time out).");
    	RESOURCE_BUNDLE.put("XmlRpcClient.NetworkErrorUnknown","A network error occurred (%1).");
    	RESOURCE_BUNDLE.put("XmlRpcClient.ParseError","The response could not be parsed.");
    	RESOURCE_BUNDLE.put("XmlRpcServlet.ServiceClassNotFound","The service class cannot not found: ");
    	RESOURCE_BUNDLE.put("XmlRpcServlet.ServiceClassNotInstantiable","The service class cannot be instantiated: ");
    	RESOURCE_BUNDLE.put("XmlRpcServlet.ServiceClassNotAccessible","The service class is not accessible: ");
    	RESOURCE_BUNDLE.put("XmlRpcServlet.InvalidServicesFormat","The services parameter format is invalid: ");
    	RESOURCE_BUNDLE.put("XmlRpcSerializer.UnsupportedType","Could not serialize response. Unsupported type: ");
    	RESOURCE_BUNDLE.put("XmlRpcValue.IllegalDate","Illegal date encountered:");
    	RESOURCE_BUNDLE.put("XmlRpcValue.UnexpectedNestedValue","Nested value encountered for a non-composite value");
    	RESOURCE_BUNDLE.put("XmlRpcParser.ReaderInstantiationError","Could not instantiate XMLReader parser");
    	RESOURCE_BUNDLE.put("XmlRpcParser.ParsingError","A problem occured during parsing");
    	RESOURCE_BUNDLE.put("XmlRpcDispatcher.HandlerNotFound","The specified handler cannot be found");
    	RESOURCE_BUNDLE.put("XmlRpcDispatcher.InvalidMethodNameFormat","Invalid method name format");
    	RESOURCE_BUNDLE.put("XmlRpcDispatcher.InvocationCancelled","The invocation was cancelled by a processor object");
    	RESOURCE_BUNDLE.put("XmlRpcDispatcher.ErrorSendingFault","Could not send fault back to client due to communication problems");
    	RESOURCE_BUNDLE.put("Base64.InvalidDataLength","Error decoding BASE64 element: Miscalculated data length");
    	RESOURCE_BUNDLE.put("ReflectiveInvocationHandler.MethodNotPublished","The method has not been published or does not exist");
    	RESOURCE_BUNDLE.put("ReflectiveInvocationHandler.MethodDontExist","The method cannot be found. Signature:"); 
    	RESOURCE_BUNDLE.put("IntrospectingSerializer.SerializationError","Could not serialize property:"); 
    	RESOURCE_BUNDLE.put("XmlRpcClient.Encoding","UTF-8"); 
    	RESOURCE_BUNDLE.put("XmlRpcServlet.Encoding","UTF-8"); 
    }
//    /** <describe> */
//    private static final String BUNDLE_NAME = "redstone.xmlrpc.XmlRpcMessages";
//
//    /** <describe> */
//    private static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle( BUNDLE_NAME );
}
